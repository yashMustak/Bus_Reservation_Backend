create table Passenger
(P_ID number primary key,
First_name varchar(20) not null,
Last_name varchar(20),
age number,
gender varchar(1));

-------------------------------------------------------

create table Ticket
(ticket_no number primary key,
*fare number not null);

-------------------------------------------------------

create table Ticket_P
(ticket_no number,
P_ID number,
CONSTRAINT ticket_P_pk primary key(ticket_no, P_ID));

-------------------------------------------------------

create table Ticket_B
(bus_no number,
ticket_no number,
date_B date,
bording_city varchar(20),
drop_city varchar(20),
start_J_time timestamp,
finish_J_time timestamp,
CONSTRAINT ticket_B_pk primary key(bus_no,ticket_no));

-------------------------------------------------------

create table Bus
(bus_no number primary key,
type varchar(10),
start_time date,
total_seat number,
rate_pkm number);

-------------------------------------------------------

create table Bus_C
(bus_no number,
city varchar(20),
timeC date,
seat_av number,
distance number,
CONSTRAINT bus_c_pk primary key(bus_no, city));

-------------------------------------------------------

-- code to calculate fare

create or replace function fare_cal1 (tick_no number)
return number
is
cnt number := 0;
f1 number;
t1 number;
begin
select count(*) into cnt from SYS.TICKET_P where ticket_no = tick_no;
f1 := fare01(1007);
t1 := f1 * cnt;
return t1;
end;

-------------------------------------------------------

-- code to calculate fare1

create or replace function fare01 (ticketno number)
return number
is
sum1 number;
sum2 number;
r number;
d1 number;
d2 number;
cursor c1 is
select bus_no, bording_city, drop_city from Ticket_B where ticket_no = ticketno;
rec1 c1%ROWTYPE;
begin
sum1 := 0;
sum2 := 0;
for rec1 in c1 loop
	select distance into d1 from Bus_C where city = rec1.drop_city AND bus_no = rec1.bus_no;
	select distance into d2 from Bus_C where city = rec1.bording_city AND bus_no = rec1.bus_no;
	sum1 := sum1 + d1 - d2;
	select rate_pkm into r from Bus where bus_no = rec1.bus_no;
	sum2 := sum2 + r*(d1 - d2);
end loop;
--close c1;
if sum2<50 then
	sum2 := 50;
end if;
return sum2;
end;

--------------------------------------------------------
%%
--code to calculate available seats

create or replace procedure u_available (busno IN number, p_city IN varchar)
is
bCity varchar(20);
dCity varchar(20);
d1 number;
d2 number;
d number;
tick number;
c number;
sum1 number;
a number;
tot number;
cursor c1 is
select ticket_no, bording_city, drop_city from Ticket_B where bus_no = busno;
rec1 c1%ROWTYPE;
begin
sum1 := 0;
select distance into d from Bus_C where city = p_city AND bus_no = busno;
for rec1 in c1
loop
	select distance into d1 from Bus_C where city = rec1.bording_city AND bus_no = busno;
	select distance into d2 from Bus_C where city = rec1.drop_city AND bus_no = busno;
	if d1 <= d AND d2 > d then
		select count(*) into c from Ticket_P where ticket_no = rec1.ticket_no;
		sum1 := sum1 + c;
	end if;
end loop;
select total_seat into tot from Bus where bus_no = busno;
a := tot - sum1;
if a>=0 then
	update Bus_C set seat_av = a where bus_no = busno AND city = p_city;
else
	raise_application_error(-20001, 'Seats are already full');
end if;
end;

-------------------------------------------------------------------

create or replace function B_N_available (busno number, bCity varchar, dCity varchar)
return number
is
d1 number;
d2 number;
d number;
min1 number;
temp number;
cursor c1 is
select city from Bus_C where bus_no = busno;
rec1 c1%ROWTYPE;
begin
select total_seat into min1 from Bus where bus_no = busno;
select distance into d1 from Bus_c where city = bCity AND bus_no = busno;
select distance into d2 from Bus_c where city = dCity AND bus_no = busno;
for rec1 in c1 loop
	select distance into d from Bus_c where city = rec1.city AND bus_no = busno;
	if d1 <= d AND d2 > d then
		select seat_av into temp from Bus_C where bus_no = busno AND city = rec1.city;
		if temp < min1 then
			min1 := temp;
		end if;
	end if;
end loop;
close c1;
return min1;
end B_N_available;

-----------------------------------------------------------------

--sequence for ticket no

create sequence ticketNo_seq
minvalue 1000
start with 1000
increment by 1
cache 20;

----------------------------------------------------------------

--sequence for P_ID

create sequence P_ID_seq
minvalue 1
start with 1
increment by 1
cache 20;

---------------------------------------------------------------

--sequence for bus no

create sequence BUS_seq
minvalue 100
start with 100
increment by 1
cache 20;

---------------------------------------------------------------

--procedure to insert into passenger

create or replace procedure insertP (fname IN varchar, lname IN varchar, age IN number, gender IN varchar)
is
begin
	insert into Passenger values (P_ID_seq.nextval, 'fname', 'lname', age, 'gender');
end;

insert into Passenger values (P_ID_seq.nextval, '&fname', '&lname', &age, '&gender');
--------------------------------------------------------------
%%
--procedure to insert into BUS

create or replace procedure BusI
is
begin
	insert into Bus values (BUS_seq.nextval, '&Type', TO_TIMESTAMP(:startTime, 'HH24:MI:SS'), &totalSeats, &ratePerKM);
end;


insert into Bus values (BUS_seq.nextval, '&Type', NULL, &totalSeats, &ratePerKM);
--------------------------------------------------------------

create table graph
(source1 VARCHAR(20),
destination VARCHAR(20),
distance number,
CONSTRAINT graph_pk PRIMARY KEY (source1, destination)
) ORGANIZATION INDEX compress 1;

INSERT into SYS.GRAPH values('&s', '&d', &dist);

variable remove_Path varchar(28)
variable src VARCHAR(28)
variable dest VARCHAR(28)
exec :remove_Path :="

exec :src :='B'

exec :dest :='P'

SELECT source1 src, destination dest, path, sum_dist shortest_dist
FROM
(SELECT DISTINCT source1, destination, path,
        sum(to_number( SUBSTR(x,
                       INSTR (x, ',', 1, LEVEL  ) + 1,
                       INSTR (x, ',', 1, LEVEL+1) -
      INSTR (x, ',', 1, LEVEL) -1 ))) OVER (PARTITION BY path) sum_dist
  FROM
 (
   WITH REMOVE_PATH AS (
   SELECT SUBSTR(str,
           INSTR(str, ',', 1, LEVEL  ) + 1,
           INSTR(str, ',', 1, LEVEL+1) -
           INSTR(str, ',', 1, LEVEL) -1 ) str     
   FROM (SELECT ','||NVL(:Remove_Path, ' ')||','||:src||','||:dest||','
         AS str FROM DUAL)
   CONNECT BY PRIOR STR = STR
   AND INSTR (str, ',', 1, LEVEL+1) > 0
   AND PRIOR dbms_random.string ('p', 10) IS NOT NULL )
   SELECT  connect_by_root source1 as source1,  destination,
           sys_connect_by_path(distance, ',')||',' x,
           :src|| sys_connect_by_path(destination, ',') path        
   FROM  SYS.GRAPH
   WHERE  destination = :dest
   START WITH source1  = :src
   CONNECT by nocycle PRIOR destination = source1
   AND source1 NOT IN (SELECT str FROM REMOVE_PATH)
  )
  CONNECT BY PRIOR path = path
  AND INSTR (x, ',', 1, LEVEL+1) > 0
  AND PRIOR dbms_random.string ('p', 10) IS NOT NULL
  ORDER BY sum_dist NULLS LAST
)
WHERE ROWNUM = 1

--------------------------------------------------------------------------------

create or replace procedure buses 
as
begin
CREATE GLOBAL TEMPORARY TABLE a
ON COMMIT PRESERVE ROWS
AS
SELECT source1 src, destination dest, path, sum_dist shortest_dist
FROM
(SELECT DISTINCT source1, destination, path,
        sum(to_number( SUBSTR(x,
                       INSTR (x, ',', 1, LEVEL  ) + 1,
                       INSTR (x, ',', 1, LEVEL+1) -
      INSTR (x, ',', 1, LEVEL) -1 ))) OVER (PARTITION BY path) sum_dist
  FROM
 (
   WITH REMOVE_PATH AS (
   SELECT SUBSTR(str,
           INSTR(str, ',', 1, LEVEL  ) + 1,
           INSTR(str, ',', 1, LEVEL+1) -
           INSTR(str, ',', 1, LEVEL) -1 ) str     
   FROM (SELECT ','||NVL(:Remove_Path, ' ')||','||:src||','||:dest||','
         AS str FROM DUAL)
   CONNECT BY PRIOR STR = STR
   AND INSTR (str, ',', 1, LEVEL+1) > 0
   AND PRIOR dbms_random.string ('p', 10) IS NOT NULL )
   SELECT  connect_by_root source1 as source1,  destination,
           sys_connect_by_path(distance, ',')||',' x,
           :src|| sys_connect_by_path(destination, ',') path        
   FROM  SYS.GRAPH
   WHERE  destination = :dest
   START WITH source1  = :src
   CONNECT by nocycle PRIOR destination = source1
   AND source1 NOT IN (SELECT str FROM REMOVE_PATH)
  )
  CONNECT BY PRIOR path = path
  AND INSTR (x, ',', 1, LEVEL+1) > 0
  AND PRIOR dbms_random.string ('p', 10) IS NOT NULL
  ORDER BY sum_dist NULLS LAST
)
WHERE ROWNUM = 1;
end;

---------------------------------------------------------------------------------------

declare
procedure inserttb (busno number, tick number, dat varchar, startc varchar2, finishc varchar2, startjtime varchar2, finishjtime varchar2)
as
begin
insert into Ticket_B values(busno, tick, TO_DATE(dat, 'dd/mm/yyyy'), startc, finishc, startjtime, finishjtime);
end;
begin
inserttb(:dat, :bus_no, :startcity, :finishcity, :starttime, :finishtime);
exception
when OTHERS then
  dbms_output.put_line('there is some error');
end;

insert into Ticket_B values(&busno, ticketNo_seq.nextval, TO_DATE(&dat, 'dd/mm/yyyy'), '&startc', '&finishc', '&startjtime', '&finishjtime');

----------------------------------------------------------------------------------------
declare
a number;
procedure insertt (fare IN number)
as
begin
insert into Ticket values(ticketno_seq.nextval, fare);
end;
begin
a := fare_cal1()
insertt(:f);
exception
when OTHERS then
  dbms_output.put_line('there is some error');
end;



insert into Bus values(bus_seq.nextval, '&type', NULL, &tot_seat, &rate);

insert into Bus_c values (&busno, '&city', TO_DATE('&time1', 'hh24:mi:ss'), &seat_av, &distance);

insert into passenger values(P_ID_seq.nextval, '&fname', '&lname', &age, '&g');

insert into ticket values(ticketNo_seq.nextval, &FARE);

insert into ticket_B values(ticketNo_seq.currval, &P_ID);

insert into ticket_B values(&busno, 1007, NULL, '&bcity', '&dcity', '&stime', '&ftime');

declare
a1 number;
t1 number;
begin
select ticket_no into t1 from ticket where fare = 0;
a1 := fare_cal1(t1);
update SYS.TICKET set fare = a1 where fare = 0;
--insert into ticket values(ticketNo_seq.nextval, 0);
DBMS_OUTPUT.PUT_LINE(a1);
end;


declare
begin
u_available(120, 'A');
end;